import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Subject } from 'rxjs';
import { Router } from '@angular/router';
import { User } from '../models/user.model';
import { AuthData } from '../models/auth-data.model';

@Injectable({
  providedIn: 'root'
})
export class LoginEngineService {
  // The token string generated by the backend
  private token: string;
  // Value to determine if the user is an admin
  public isAdmin = false;
  // Value to determine if the user is logged in
  private isAuthenticated = false;
  // Subject to update the authentication status
  private authStatusListener = new Subject<boolean>();

  constructor(
    private http: HttpClient,
    private router: Router ) { }

  // Gets the authentication status listener
  getAuthStatusListener() {
    return this.authStatusListener.asObservable();
  }

  // Gets the authentication status
  getIsAuth() {
    return this.isAuthenticated;
  }

  // Gets the token
  getToken() {
    return this.token;
  }

  // The function to create a new user
  createUser(user: User) {
    console.log(user);
    this.http.post('http://localhost:3000/api/user/create', user)
    .subscribe(response => {
      console.log(response);
    });
  }

  // The function to log in a user
  loginUser(username: string, password: string) {
    // Pass username and password values to the backend
    const authUser: AuthData = {username, password};
    this.http.post<{token: string}>('http://localhost:3000/api/user/login', authUser)
    .subscribe(response => {
      // Grab token from response and store in the service
      const token = response.token;
      this.token = token;
      // If token exists, change authorization status and reroute to homepage
      if (token) {
        this.isAuthenticated = true;
        this.authStatusListener.next(true);
        this.router.navigate(['/home']);
       }
    });
  }

  // The function to log out a user - destory token, change auth status, notify listeners and navigate away
  logout() {
    this.token = null;
    this.isAuthenticated = false;
    this.authStatusListener.next(false);
    this.router.navigate(['/']);
  }
}
